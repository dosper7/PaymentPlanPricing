// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` <Slider/> testing should render a slider 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Slider
    Max={2000}
    Min={100}
    SelectedLoanAmount={1000}
    Step={100}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="sliderRangeLabels text-primary"
        >
          <span>
            100
          </span>
          <span>
            2000
          </span>
        </div>,
        <div
          className="slider"
        >
          <input
            max={2000}
            min={100}
            onChange={[Function]}
            step={100}
            type="range"
            value={1000}
          />
        </div>,
        undefined,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span>
              100
            </span>,
            <span>
              2000
            </span>,
          ],
          "className": "sliderRangeLabels text-primary",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 100,
            },
            "ref": null,
            "rendered": 100,
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 2000,
            },
            "ref": null,
            "rendered": 2000,
            "type": "span",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            max={2000}
            min={100}
            onChange={[Function]}
            step={100}
            type="range"
            value={1000}
          />,
          "className": "slider",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "max": 2000,
            "min": 100,
            "onChange": [Function],
            "step": 100,
            "type": "range",
            "value": 1000,
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "div",
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="sliderRangeLabels text-primary"
          >
            <span>
              100
            </span>
            <span>
              2000
            </span>
          </div>,
          <div
            className="slider"
          >
            <input
              max={2000}
              min={100}
              onChange={[Function]}
              step={100}
              type="range"
              value={1000}
            />
          </div>,
          undefined,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span>
                100
              </span>,
              <span>
                2000
              </span>,
            ],
            "className": "sliderRangeLabels text-primary",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": 100,
              },
              "ref": null,
              "rendered": 100,
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": 2000,
              },
              "ref": null,
              "rendered": 2000,
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              max={2000}
              min={100}
              onChange={[Function]}
              step={100}
              type="range"
              value={1000}
            />,
            "className": "slider",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "max": 2000,
              "min": 100,
              "onChange": [Function],
              "step": 100,
              "type": "range",
              "value": 1000,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "div",
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
